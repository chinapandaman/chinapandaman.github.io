<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jinge Li&#39;s Blog</title>
  
  <subtitle>Hacking and Stargazing</subtitle>
  <link href="https://chinapandaman.github.io/atom.xml" rel="self"/>
  
  <link href="https://chinapandaman.github.io/"/>
  <updated>2023-08-06T18:40:14.467Z</updated>
  <id>https://chinapandaman.github.io/</id>
  
  <author>
    <name>Jinge Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vim as Primary IDE - Buffer Related</title>
    <link href="https://chinapandaman.github.io/2023/08/06/vim-blog-4/"/>
    <id>https://chinapandaman.github.io/2023/08/06/vim-blog-4/</id>
    <published>2023-08-06T18:40:47.000Z</published>
    <updated>2023-08-06T18:40:14.467Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Thank-You-Bram"><a href="#Thank-You-Bram" class="headerlink" title="Thank You Bram"></a>Thank You Bram</h3><p>Before I start this blog today, please allow me to express my deepest grieving to Mr. Bram Moolenaar, the author of Vim who just left us forever. Without your work many of us developers will never have the opportunity of using such a great tool that boosts our efficiency. You, like many other contributors, are the true martyr to the spirit of open source.</p><h3 id="Buffer-Intro"><a href="#Buffer-Intro" class="headerlink" title="Buffer Intro"></a>Buffer Intro</h3><p>A buffer is an area of Vim’s memory used to hold text read from a file. Buffers are what allow Vim to edit multiple files simultaneously and switch between each of them. In this blog, I will be talking about some plugins and configs that make editing buffers of Vim an experience similar to a modern IDE.</p><span id="more"></span><h3 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h3><p>Pretty much all modern IDEs have a tabline at the top of their UI. Whenever we open a new file it adds a new tab to it. We can navigate through files we opened by navigating through different tabs. Vim’s buffer plays a similar role, except with its default behavior we will need to use commands like <code>:buffers</code> or <code>:ls</code> to know what each buffer holds and then navigate from there. Is there an easier way?</p><p>Luckily, one of Vim’s most popular plugins, <a href="https://github.com/vim-airline/vim-airline">vim-airline</a>, provides a very neat tabline. We can install the plugin like this:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">    <span class="comment">&quot; other plugins</span></span><br><span class="line">    Plug <span class="string">&#x27;vim-airline/vim-airline&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:airline_powerline_fonts</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Note that the <code>airline_powerline_fonts</code> config requires <a href="https://github.com/powerline/fonts">Powerline Fonts</a>. After running <code>:PlugInstall</code> Vim will be geared with a lean and meaningful status bar at the bottom.</p><p><img src="/2023/08/06/vim-blog-4/1.png"></p><p>Notice how the status bar shares the same theme as my Vim without further configuring which is very nice.</p><p>Now we just need to add this config to enable the tabline:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="variable">g:airline</span>#extensions#tabline#enabled = <span class="number">1</span></span><br></pre></td></tr></table></figure><p><img src="/2023/08/06/vim-blog-4/2.png"></p><p>So now we have a much cleaner visual view of buffers that are opened, but navigating between them still requires commands like <code>:b &lt;buffer&gt;</code> or <code>:bnext</code>. So the next step I did was to map the Tab key for buffer navigation:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Tab&gt;</span> :<span class="keyword">bn</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;S-Tab&gt;</span> :<span class="keyword">bp</span><span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><p>By adding the above configs, I’m able to go forwards with Tab and backwards with Shift + Tab keys through the tabline.</p><h3 id="File-Explorer"><a href="#File-Explorer" class="headerlink" title="File Explorer"></a>File Explorer</h3><p>A file tree explorer is also equipped for pretty much all modern IDEs. Nowadays as I’m more and more experienced with Vim and working with terminals I find myself using visual file explorer less and less. But I still think for some complex projects with many levels of nested directories a file explorer can come quite handy.</p><p>Vim’s best known file explorer is the good old <a href="https://github.com/preservim/nerdtree">NERDTREE</a>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">    <span class="comment">&quot; other plugins</span></span><br><span class="line">    Plug <span class="string">&#x27;scrooloose/nerdtree&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><p>Once installed, there are some small configs I added for it:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span><span class="keyword">m</span> :NERDTreeToggle<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">let</span> NERDTreeShowHidden=<span class="number">1</span></span><br></pre></td></tr></table></figure><p>The first line is simply a keybinding I mapped to more easily open and close NERDTREE. The second line is to enable displaying of hidden files, as in most cases I will need to edit files like <code>.gitignore</code> or even <code>.vimrc</code>.</p><p><img src="/2023/08/06/vim-blog-4/3.png"></p><h3 id="Split-Navigations"><a href="#Split-Navigations" class="headerlink" title="Split Navigations"></a>Split Navigations</h3><p>Vim allows creating different splits in a view and has a big room for customization. This enables infinite possibilities as each split’s buffer can display more than just files opened. In fact many plugins, like NERDTREE discussed in the previous section, utilizes splits to display its UI.</p><p>In general though, developers will almost always use split’s basic functionalities like vertical splits which allows them to view different files side by side. Vim allows navigation of splits with <code>:wincmd &lt;ijkl&gt;</code> which is in my opinion not the most convenient way. What I personally find out is that since Vim’s navigation within code blocks can already be done through the <code>ijkl</code> keys, it frees up the four arrow keys which I decided to map them to navigations between splits:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Up&gt;</span> :<span class="keyword">wincmd</span> <span class="keyword">k</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Down&gt;</span> :<span class="keyword">wincmd</span> <span class="keyword">j</span><span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Left&gt;</span> :<span class="keyword">wincmd</span> h<span class="symbol">&lt;CR&gt;</span></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Right&gt;</span> :<span class="keyword">wincmd</span> <span class="keyword">l</span><span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Closing-Buffers"><a href="#Closing-Buffers" class="headerlink" title="Closing Buffers"></a>Closing Buffers</h3><p>One of the most annoying things when working with Vim is that you have all your splits set up and organized perfectly. Then you run <code>:bdelete</code> to delete a buffer and then Vim closes all windows that have the buffer opened and your layout is completely messed up. The good news is there is a small plugin that solves this exact problem named <a href="https://github.com/moll/vim-bbye">vim-bbye</a>:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">    <span class="comment">&quot; other plugins</span></span><br><span class="line">    Plug <span class="string">&#x27;moll/vim-bbye&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">nnoremap</span> <span class="symbol">&lt;Leader&gt;</span>q :Bdelete<span class="symbol">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure><p>By adding the above configs I’m able to close the current buffer with a \ + q keybind without messing up my current split layout.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>In this blog, I went over how I have been interacting with Vim’s buffers. Buffers are one of Vim’s most powerful core functionalities and what makes Vim so customizable UI wise. Even though this is my current most comfortable way of using it I have only scratched the surface of the iceberg.</p><p>In the next article, I will be going over how I configured my Vim to do searches and Git related workflows.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Thank-You-Bram&quot;&gt;&lt;a href=&quot;#Thank-You-Bram&quot; class=&quot;headerlink&quot; title=&quot;Thank You Bram&quot;&gt;&lt;/a&gt;Thank You Bram&lt;/h3&gt;&lt;p&gt;Before I start this blog today, please allow me to express my deepest grieving to Mr. Bram Moolenaar, the author of Vim who just left us forever. Without your work many of us developers will never have the opportunity of using such a great tool that boosts our efficiency. You, like many other contributors, are the true martyr to the spirit of open source.&lt;/p&gt;
&lt;h3 id=&quot;Buffer-Intro&quot;&gt;&lt;a href=&quot;#Buffer-Intro&quot; class=&quot;headerlink&quot; title=&quot;Buffer Intro&quot;&gt;&lt;/a&gt;Buffer Intro&lt;/h3&gt;&lt;p&gt;A buffer is an area of Vim’s memory used to hold text read from a file. Buffers are what allow Vim to edit multiple files simultaneously and switch between each of them. In this blog, I will be talking about some plugins and configs that make editing buffers of Vim an experience similar to a modern IDE.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Coding" scheme="https://chinapandaman.github.io/tags/Coding/"/>
    
    <category term="IDE" scheme="https://chinapandaman.github.io/tags/IDE/"/>
    
    <category term="Vim" scheme="https://chinapandaman.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Sonar Analysis Against PyPDFForm</title>
    <link href="https://chinapandaman.github.io/2023/05/15/sonar-blog-1/"/>
    <id>https://chinapandaman.github.io/2023/05/15/sonar-blog-1/</id>
    <published>2023-05-16T01:33:03.000Z</published>
    <updated>2023-05-16T01:39:37.395Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Motivation"><a href="#Motivation" class="headerlink" title="Motivation"></a>Motivation</h3><p>While working on <a href="https://github.com/chinapandaman/PyPDFForm">PyPDFForm</a>, I implemented many different mechanisms to ensure the code quality of the project. Some of these include:</p><ul><li>Testing using <a href="https://pytest.org/">pytest</a>.</li><li>Uploading coverage data to <a href="https://app.codecov.io/gh/chinapandaman/PyPDFForm">codecov</a>.</li><li>Formatting the code using <a href="https://github.com/chinapandaman/PyPDFForm/blob/master/.github/workflows/python-black-isort.yml">black&#x2F;isort</a>.</li><li>Linting using <a href="https://pypi.org/project/pylint/">pylint</a>.</li></ul><p>Recently I have learned about the community loved static analysis tool <a href="https://www.sonarsource.com/products/sonarqube/">SonarQube</a>. So I ask myself what kind of static analysis result I would get from it, especially with all these mechanisms I already have to ensure code quality. In this blog, I will find out answers to this exact question.</p><span id="more"></span><h3 id="Setup-Sonar"><a href="#Setup-Sonar" class="headerlink" title="Setup Sonar"></a>Setup Sonar</h3><p>For now all I want is to see some analysis results from Sonar for PyPDFForm. There is no intention of making Sonar part of the CI pipeline yet. So there is no need of hosting Sonar on a remote server, instead all I want is to simply host Sonar locally and run a couple scans. Luckily Sonar does provide a way of doing that in <a href="https://docs.sonarqube.org/latest/try-out-sonarqube/">this</a> documentation.</p><p>The first step is to setup a local host for Sonar. As part of the prerequisites hosting Sonar requires Java 17 for version 10.0, which is something that’s already installed on my machine.</p><p><img src="/2023/05/15/sonar-blog-1/1.png"></p><p>The next thing is to download the zip file for Sonar host from <a href="https://www.sonarsource.com/products/sonarqube/downloads/">here</a>. Here I downloaded the community edition of it.</p><p>After unzipping the zip file it is pretty simple to start the server by running the following:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;path_to_unzipped_folder&gt;/bin/&lt;OS&gt;/sonar.sh console</span><br></pre></td></tr></table></figure><p>In my case I’m on a Surface Pro running Ubuntu. So the command would look like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;path_to_unzipped_folder&gt;/bin/linux-x86-64/sonar.sh console</span><br></pre></td></tr></table></figure><p><img src="/2023/05/15/sonar-blog-1/2.png"></p><p>Execute the command and wait for it to finish spinning up the server. It is done when these prompts show up:</p><p><img src="/2023/05/15/sonar-blog-1/3.png"></p><p>Now if I go to <a href="http://localhost:9000/">http://localhost:9000/</a>, I will see this page which indicates Sonar is up and running locally:</p><p><img src="/2023/05/15/sonar-blog-1/4.png"></p><p>Enter admin&#x2F;admin for login&#x2F;password, it will then redirect me to a page where I need to change the admin password. Once done Sonar host will be ready to use.</p><p><img src="/2023/05/15/sonar-blog-1/5.png"></p><p>Now that I have the host setup, the next thing I need is the scanner that actually scans the code. For my purpose I’m downloading the generic Sonar scanner from <a href="https://docs.sonarqube.org/latest/analyzing-source-code/scanners/sonarscanner/">here</a>. Unzip the zip file and it will be ready to use.</p><p><img src="/2023/05/15/sonar-blog-1/6.png"></p><h3 id="Analyze-PyPDFForm"><a href="#Analyze-PyPDFForm" class="headerlink" title="Analyze PyPDFForm"></a>Analyze PyPDFForm</h3><p>I have both the Sonar host and Sonar scanner setup. It’s time to run my first scan against PyPDFForm.</p><p>Before I start scanning, I need to first generate a token from the Sonar host given that’s how Sonar authenticates. The token can be generated from <a href="http://localhost:9000/account/security">this page</a>. Here I named my token <code>local</code> and selected the type <code>User Token</code>:</p><p><img src="/2023/05/15/sonar-blog-1/7.png"></p><p>Once I have my token it can be used as part of the Sonar scanner command. Here is what it typically looks like:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;path_to_unzipped_scanner_folder&gt;/bin/sonar-scanner -Dsonar.host.url=http://localhost:9000/ -Dsonar.token=&lt;generated_token&gt; -Dsonar.projectKey=&lt;project_key&gt; -Dsonar.projectName=&lt;project_display_name&gt;</span><br></pre></td></tr></table></figure><p>In my case, the command looks like this:</p><p><img src="/2023/05/15/sonar-blog-1/8.png"></p><p>Let’s look at this command piece by piece:</p><ul><li><code>-Dsonar.host.url</code> specifies the host URL of the Sonar server, which in my case is the local host.</li><li><code>-Dsonar.token</code> is the token I just generated.</li><li><code>-Dsonar.projectKey</code> is the unique identifier of the project.</li><li><code>-Dsonar.projectName</code> is the display name of the project.</li></ul><p>Execute the command and the scanner will kick off the scan. Wait until it finishes:</p><p><img src="/2023/05/15/sonar-blog-1/9.png"></p><p>Now if I refresh the Sonar host’s home page, I can see my new project show up there:</p><p><img src="/2023/05/15/sonar-blog-1/10.png"></p><p>If I click on the project and open up its dashboard I can see the analysis result of my first scan:</p><p><img src="/2023/05/15/sonar-blog-1/11.png"></p><p>So the good news is that my project seems to have no bugs, vulnerabilities, security hotspots, and duplications. All good stuffs and I can see how all those code quality mechanisms have helped me to achieve these.</p><p>The not so good news are:</p><ul><li>The coverage shows as 0%.</li><li>There are some code smells.</li></ul><p>For coverage I know PyPDFForm as a project has 100% coverage since I have introduced Codecov as part of my CI pipeline. For Sonar all I need to do is to upload my coverage data. This means I need to run another scan while specifying where Sonar should upload my coverage file.</p><p>So first of all let me re-run tests and generate a new coverage file:</p><p><img src="/2023/05/15/sonar-blog-1/12.png"></p><p>After that my new Sonar scanner command looks like this:</p><p><img src="/2023/05/15/sonar-blog-1/13.png"></p><p>Here I introduced another option <code>-Dsonar.python.coverage.reportPaths</code> which tells Sonar the location of my coverage file. For more information about test coverage on Sonar please read <a href="https://docs.sonarqube.org/latest/analyzing-source-code/test-coverage/overview/">here</a>.</p><p>Execute the command, wait until the scan finishes, and now let’s look at the dashboard:</p><p><img src="/2023/05/15/sonar-blog-1/14.png"></p><p>Now the coverage is no longer 0%, but instead of the expected 100% it shows 57%.</p><p>Let’s look into why this is the case by clicking on the <code>Code</code> tab of the dashboard.</p><p><img src="/2023/05/15/sonar-blog-1/15.png"></p><p>And here I found out why. It looks like the main package of <code>PyPDFForm</code> does have 100% coverage. It’s just that Sonar scanned some other files which are neither covered nor intended to be covered.</p><p>This means I will have to exclude certain files from my Sonar scans. Let’s modify my Sonar scanner command one more time:</p><p><img src="/2023/05/15/sonar-blog-1/16.png"></p><p>Here I added the option <code>-Dsonar.exclusions</code> which tells Sonar some files or directories I would like to exclude from the scan.</p><p>Execute the command and let’s look at the dashboard again:</p><p><img src="/2023/05/15/sonar-blog-1/17.png"></p><p>Finally the coverage is 100%. But there are still 4 code smells shown on the dashboard. Let’s take a look at them by clicking on the <code>Issues</code> tab.</p><p><img src="/2023/05/15/sonar-blog-1/18.png"></p><p>So all 4 code smells seem to point to the same thing, which is some of my functions could use some refactoring to reduce cognitive complexity. This is mostly due to complex logic such as too many if else blocks within a single function. For example:</p><p><img src="/2023/05/15/sonar-blog-1/19.png"></p><p>However, Sonar gave it a maintainability score of <code>A</code>, which seems to indicate it’s nothing major. On top of that reducing complexity of functions is something I have been continuously doing anyway while working on PyPDFForm.</p><p><img src="/2023/05/15/sonar-blog-1/20.png"></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>Overall I’d say the outcome of Sonar analysis against PyPDFForm is excellent. It is a pleasure to know that all the previous effort I put into code quality assurance is recognized by the community loved static analysis tool. I would also recommend anyone who reads this blog give SonarQube a try as it is a great tool and will make your code much cleaner.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Motivation&quot;&gt;&lt;a href=&quot;#Motivation&quot; class=&quot;headerlink&quot; title=&quot;Motivation&quot;&gt;&lt;/a&gt;Motivation&lt;/h3&gt;&lt;p&gt;While working on &lt;a href=&quot;https://github.com/chinapandaman/PyPDFForm&quot;&gt;PyPDFForm&lt;/a&gt;, I implemented many different mechanisms to ensure the code quality of the project. Some of these include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Testing using &lt;a href=&quot;https://pytest.org/&quot;&gt;pytest&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Uploading coverage data to &lt;a href=&quot;https://app.codecov.io/gh/chinapandaman/PyPDFForm&quot;&gt;codecov&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Formatting the code using &lt;a href=&quot;https://github.com/chinapandaman/PyPDFForm/blob/master/.github/workflows/python-black-isort.yml&quot;&gt;black&amp;#x2F;isort&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Linting using &lt;a href=&quot;https://pypi.org/project/pylint/&quot;&gt;pylint&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Recently I have learned about the community loved static analysis tool &lt;a href=&quot;https://www.sonarsource.com/products/sonarqube/&quot;&gt;SonarQube&lt;/a&gt;. So I ask myself what kind of static analysis result I would get from it, especially with all these mechanisms I already have to ensure code quality. In this blog, I will find out answers to this exact question.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Coding" scheme="https://chinapandaman.github.io/tags/Coding/"/>
    
    <category term="Static Analysis" scheme="https://chinapandaman.github.io/tags/Static-Analysis/"/>
    
    <category term="Sonar" scheme="https://chinapandaman.github.io/tags/Sonar/"/>
    
  </entry>
  
  <entry>
    <title>Vim as Primary IDE - Basic Editing</title>
    <link href="https://chinapandaman.github.io/2023/05/04/vim-blog-3/"/>
    <id>https://chinapandaman.github.io/2023/05/04/vim-blog-3/</id>
    <published>2023-05-04T13:14:29.000Z</published>
    <updated>2023-05-04T15:18:45.278Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Finding-Plugins"><a href="#Finding-Plugins" class="headerlink" title="Finding Plugins"></a>Finding Plugins</h3><p>In the previous blog, I discussed how to use vim-plug to manage plugins. So the question now is how do I find all those fancy plugins out there?</p><p>On top of just simply google and browse through GitHub, there is a website called <a href="https://vimawesome.com/">VimAwesome</a> which allows me to browse and search different plugins by categories.</p><p>In this blog, I will be talking about some basic plugins and configs that would boost my basic editing experience.</p><span id="more"></span><h3 id="Theme"><a href="#Theme" class="headerlink" title="Theme"></a>Theme</h3><p>Every coder wants their IDE to look fancy, I think everyone of us can admit that and I’m no exception. After carefully evaluating a lot of popular themes out there the theme I chose in the end is the dark mode of <a href="https://github.com/morhetz/gruvbox">gruvbox</a> for two reasons:</p><ul><li>It is the default theme for <a href="https://spacevim.org/">SpaceVim</a>, which is one of the more successful Vim config project in the community.</li><li>Out of all the themes I have tried, gruvbox has the best syntax highlighting, especially for some less popular languages like Groovy.</li></ul><p>Gruvbox can be installed just like a plugin, and to use the dark mode of it I have to set the background to dark. Finally enabling terminal GUI colors will give the theme a richer set of colors to work with:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">    <span class="comment">&quot; other plugins</span></span><br><span class="line">    Plug <span class="string">&#x27;morhetz/gruvbox&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">colo</span> gruvbox</span><br><span class="line"><span class="keyword">set</span> background=dark</span><br><span class="line"><span class="keyword">set</span> termguicolors</span><br></pre></td></tr></table></figure><p>Here is a screenshot of the theme:</p><p><img src="/2023/05/04/vim-blog-3/3.png"></p><h3 id="Line-Numbers"><a href="#Line-Numbers" class="headerlink" title="Line Numbers"></a>Line Numbers</h3><p>No one codes without line numbers. Line numbers help us to better navigate through files, especially during collaborative coding. Furthermore line numbers have an added benefit for Vim which is making navigation using the j and k key bindings much more efficient.</p><p>Vim supports three types of line numbers. The first type is the usual line number that one would normally see in other IDEs. It can be turned on by adding this to <code>.vimrc</code> file:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br></pre></td></tr></table></figure><p>This type of line number is called absolute line number, as it shows the absolute position of each line of code.</p><p>The second type of line number is called relative line number, which can be turned on by adding this to <code>.vimrc</code> file:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> relativenumber</span><br></pre></td></tr></table></figure><p>For relative line number, the line number on each line of code is the relative distance to the line where your cursor is on. This type of line number is extremely useful for Vim as I navigate through files using the “number + j” or “number + k” key bindings.</p><p>If I combine the absolute and relative line number by adding both of them to <code>.vimrc</code> file:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> <span class="keyword">number</span></span><br><span class="line"><span class="keyword">set</span> relativenumber</span><br></pre></td></tr></table></figure><p>I create the third type of line number, which is called hybrid line number. For this type of line number, it will display relative line numbers for any other lines in the file, except the line where your cursor is on in which it will display absolute line number. Here is a screenshot:</p><p><img src="/2023/05/04/vim-blog-3/1.png"></p><p>Hybrid line number combines the best of absolute and relative line number, allows me to benefit from both the j and k key binding navigation Vim provides and knowing exactly where I’m at within the file. And because of that, hybrid line number is my default config for Vim when it comes to line numbers.</p><h3 id="Indentation"><a href="#Indentation" class="headerlink" title="Indentation"></a>Indentation</h3><p>Personally I’m not a big fan of re-configuring indentation for different types of files. So I found a very interesting plugin called <a href="https://github.com/tpope/vim-sleuth">vim-sleuth</a> which automatically adjusts indentation for me:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">    <span class="comment">&quot; other plugins</span></span><br><span class="line">    Plug <span class="string">&#x27;tpope/vim-sleuth&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><p>On top of vim-sleuth, <a href="https://github.com/preservim/vim-indent-guides">vim-indent-guides</a> is another plugin I use to better visualize indentations. This plugin enables displaying of indent levels and is great for when I work with languages like Python:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">    <span class="comment">&quot; other plugins</span></span><br><span class="line">    Plug <span class="string">&#x27;nathanaelkane/vim-indent-guides&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:indent_guides_enable_on_vim_startup</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Here is a screenshot of vim-indent-guides:</p><p><img src="/2023/05/04/vim-blog-3/2.png"></p><h3 id="Syntax-Highlighting"><a href="#Syntax-Highlighting" class="headerlink" title="Syntax Highlighting"></a>Syntax Highlighting</h3><p>Obviously when I’m coding, I will want syntax highlighting on for my code:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span></span><br></pre></td></tr></table></figure><h3 id="Backspace"><a href="#Backspace" class="headerlink" title="Backspace"></a>Backspace</h3><p>In Vim, backspace does not function as a key binding for deletion by default. This can be changed by adding the following to <code>.vimrc</code> file:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> backspace=<span class="built_in">indent</span>,eol,start</span><br></pre></td></tr></table></figure><h3 id="Round-Square-Curly-Brackets"><a href="#Round-Square-Curly-Brackets" class="headerlink" title="Round&#x2F;Square&#x2F;Curly Brackets"></a>Round&#x2F;Square&#x2F;Curly Brackets</h3><p>When coding, it is almost inevitable to work with the three types of brackets: round, square, and curly. To make the editing experience for them better on Vim there are two plugins I use.</p><p>The first one is called <a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a>. This small plugin will insert and delete brackets in pair, which is a feature that most other modern IDEs have by default.</p><p>The second one is called <a href="https://github.com/luochen1990/rainbow">rainbow</a>. This plugin helps me to read code with many nested levels of brackets by showing different levels of them in different colors.</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">    <span class="comment">&quot; other plugins</span></span><br><span class="line">    Plug <span class="string">&#x27;jiangmiao/auto-pairs&#x27;</span></span><br><span class="line">    Plug <span class="string">&#x27;luochen1990/rainbow&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="variable">g:rainbow_active</span> = <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Here is a screenshot of rainbow brackets:</p><p><img src="/2023/05/04/vim-blog-3/4.png"></p><p>These two plugins combined with Vim’s builtin key binding for % have helped me deal with any situation when it comes to brackets.</p><h3 id="Search-Highlight"><a href="#Search-Highlight" class="headerlink" title="Search Highlight"></a>Search Highlight</h3><p>When I use Vim’s builtin search functionality, I always want my searches to be highlighted. So I added this line to my <code>.vimrc</code> file:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> hlsearch</span><br></pre></td></tr></table></figure><p>Here is a screenshot of the effect:</p><p><img src="/2023/05/04/vim-blog-3/5.png"></p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>In this blog, I have covered some plugins and configs that improve quality of life when it comes to the basic editing experience of Vim.</p><p>In the next article, I will talk about buffers, one of the core features for any IDE that enables working with multiple files and how I make my Vim experience better when working with them.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Finding-Plugins&quot;&gt;&lt;a href=&quot;#Finding-Plugins&quot; class=&quot;headerlink&quot; title=&quot;Finding Plugins&quot;&gt;&lt;/a&gt;Finding Plugins&lt;/h3&gt;&lt;p&gt;In the previous blog, I discussed how to use vim-plug to manage plugins. So the question now is how do I find all those fancy plugins out there?&lt;/p&gt;
&lt;p&gt;On top of just simply google and browse through GitHub, there is a website called &lt;a href=&quot;https://vimawesome.com/&quot;&gt;VimAwesome&lt;/a&gt; which allows me to browse and search different plugins by categories.&lt;/p&gt;
&lt;p&gt;In this blog, I will be talking about some basic plugins and configs that would boost my basic editing experience.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Coding" scheme="https://chinapandaman.github.io/tags/Coding/"/>
    
    <category term="IDE" scheme="https://chinapandaman.github.io/tags/IDE/"/>
    
    <category term="Vim" scheme="https://chinapandaman.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Vim as Primary IDE - Boilerplate</title>
    <link href="https://chinapandaman.github.io/2023/05/02/vim-blog-2/"/>
    <id>https://chinapandaman.github.io/2023/05/02/vim-blog-2/</id>
    <published>2023-05-02T22:52:55.000Z</published>
    <updated>2023-05-02T21:32:24.300Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>Before I start, make sure to checkout <a href="https://github.com/chinapandaman/vim-config">the GitHub repository</a> which contains all the configs and scripts I will be covering in this series of blogs.</p><h3 id="Plugin-Managing"><a href="#Plugin-Managing" class="headerlink" title="Plugin Managing"></a>Plugin Managing</h3><p>To make Vim as beefy as an IDE, it is not possible without plugins, at least for me. Vim has a large and active community and there are thousands of plugins out there that can boost my developing experience.</p><p>To install plugins I will first need a plugin manager. In my case the plugin manager I picked is <a href="https://github.com/junegunn/vim-plug">vim-plug</a>.</p><p>Installing vim-plug is quite simple:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><p>The actual usage of vim-plug revolves around modifying my <code>.vimrc</code> file. The below snippet exists at the very top of it:</p><span id="more"></span><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">    <span class="comment">&quot; a list of plugins to install</span></span><br><span class="line">    Plug <span class="string">&#x27;morhetz/gruvbox&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><p>By adding plugins between the two <code>call</code> blocks, vim-plug allows me to easily add&#x2F;change&#x2F;remove plugins via my <code>.vimrc</code> file.</p><p>After defining plugins, I can simply install them by running <code>:PlugInstall</code> within Vim. And after the installation has completed, I can check the status of plugins by running <code>:PlugStatus</code>. Here is a screenshot of the UI:</p><p><img src="/2023/05/02/vim-blog-2/1.png"></p><p>So now I have setup vim-plug which allows me to utilize plugins to expand Vim.</p><h3 id="Making-My-Configuration-Portable"><a href="#Making-My-Configuration-Portable" class="headerlink" title="Making My Configuration Portable"></a>Making My Configuration Portable</h3><p>The other thing that came to my mind is that I want to make my Vim configuration as portable as I can. So whenever I’m on a new machine it will require minimum effort to restore my config.</p><p>To achieve this I will need to write some <code>bash</code> script. Here is what I have:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setup.sh</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/.vim/</span><br><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br><span class="line"><span class="built_in">cp</span> .vimrc ~/.vimrc</span><br><span class="line">vim +PlugInstall +qa</span><br></pre></td></tr></table></figure><p>Let’s look at this line by line.</p><p>The first line removes the current existed <code>~/.vim/</code> directory, allowing me to have a fresh, plugin free Vim environment for my own config.</p><p>The second line is the same command that installs vim-plug which we have covered in the last section.</p><p>The third line copies my <code>.vimrc</code> to where the file should be at on the designated machine. In the future <code>.vimrc</code> will contain a lot of configs I will be making. But for now it simply has all the needed plugins managed by vim-plug.</p><p>The last line is a sequence of commands. It first launches Vim, runs the command <code>:PlugInstall</code> which installs all the plugins via vim-plug, and finally runs the command <code>:qa</code> which quits Vim. It may seem a bit complex but all it’s doing is installing plugins.</p><p>From here, I can make use of my own Vim configuration on any machine by just running:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash setup.sh</span><br></pre></td></tr></table></figure><p>And the <code>bash</code> script will cleanup the Vim environment, install vim-plug, install my vim config, and install all plugins needed for the config.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>In this blog, I have gone over some boilerplate steps that would make configuring and making use of a Vim config easier.</p><p>In the next article I will talk about some simple configurations that would enhance the basic editing experience.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h3&gt;&lt;p&gt;Before I start, make sure to checkout &lt;a href=&quot;https://github.com/chinapandaman/vim-config&quot;&gt;the GitHub repository&lt;/a&gt; which contains all the configs and scripts I will be covering in this series of blogs.&lt;/p&gt;
&lt;h3 id=&quot;Plugin-Managing&quot;&gt;&lt;a href=&quot;#Plugin-Managing&quot; class=&quot;headerlink&quot; title=&quot;Plugin Managing&quot;&gt;&lt;/a&gt;Plugin Managing&lt;/h3&gt;&lt;p&gt;To make Vim as beefy as an IDE, it is not possible without plugins, at least for me. Vim has a large and active community and there are thousands of plugins out there that can boost my developing experience.&lt;/p&gt;
&lt;p&gt;To install plugins I will first need a plugin manager. In my case the plugin manager I picked is &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Installing vim-plug is quite simple:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The actual usage of vim-plug revolves around modifying my &lt;code&gt;.vimrc&lt;/code&gt; file. The below snippet exists at the very top of it:&lt;/p&gt;</summary>
    
    
    
    
    <category term="Coding" scheme="https://chinapandaman.github.io/tags/Coding/"/>
    
    <category term="IDE" scheme="https://chinapandaman.github.io/tags/IDE/"/>
    
    <category term="Vim" scheme="https://chinapandaman.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Vim as Primary IDE - Intro</title>
    <link href="https://chinapandaman.github.io/2023/04/28/vim-blog-1/"/>
    <id>https://chinapandaman.github.io/2023/04/28/vim-blog-1/</id>
    <published>2023-04-28T19:31:10.000Z</published>
    <updated>2023-05-02T21:32:16.624Z</updated>
    
    <content type="html"><![CDATA[<p>Throughout the years I have been coding, different IDEs&#x2F;editors have attracted me and improved my workflow in different ways. Back in college, the very first editor I was taught to use a lot for CS classes was the good old Vim that comes with most Linux distributions. At the time I did not spend much time hacking it and simply learned a lot of the basic ways of using it. But it did serve its purposes for a college student with general syntax highlighting for most main stream languages and allowed me completing most of my projects.</p><span id="more"></span><p>When I first started my career, I came to realization that I finally need something more beefy than just an editor. And this is around the time where I was introduced to the JetBrains IDEs, in particular PyCharm. The rich features bundled in even just the community edition of this IDE such as GUI debugging, refactoring, searches and static analysis are amazing. Not to mention with the professional edition (which most companies would be more than happy to purchase for their software engineers), you can have supports on some of the most popular frameworks such as Django and Flask, and it has an awesome GUI database tool which makes day-to-day DB workload just that much simpler. To me, PyCharm is truly, like what JetBrains suggests, the essential tool for software developers. Throughout these years, I have tried different editors such as Atom, Sublime, vscode, etc. However none of these, even with a rich set of plugins, can compete with the kind of developing experience PyCharm brought to me.</p><p>After being spoiled for a long time by JetBrains IDEs, things finally started changing a little bit. I have recently acquired a new job and there are certain things with the new role that makes me shift away from an IDE with lots of out-of-the-box features. First of all the system admin restricts a lot of accesses on the laptops given to the employees, making installing any software quite a process. These restrictions however revolves mostly around the GUIs and does not stop you from doing a lot of things using the terminal. On top of that the kind of work I’m doing with this role is more and more based on terminal than GUIs. Finally unlike a lot of my previous roles where the tech stacks are usually monolithic, this time I have to use a wide variety of languages and frameworks. Ultimately this means I have to look for something that’s more general purpose than a monolithic IDE.</p><p>All and all I have decided that instead of something like PyCharm I need another tool that can boost my development experience with the new role. But I also said I didn’t really like a lot of the editors I tried like say vscode. And this is the moment I put my eyes back on my good old friend from college, Vim. I have used Vim heavily back in the days and know how strong it is when it comes to editing. And despite the fact that I have been a bandwagon on the IDE side, I’m also aware how configurable Vim can be and there have been projects like SpaceVim I know of which turns Vim into an IDE. And obviously Vim, even though it can be run as a GUI, is primarily terminal based.</p><p>So finally I made the decision of switching back to Vim. And my goal is ultimately making developing using Vim a similar if not the same experience as an IDE like PyCharm, but also more general purpose and terminal based. In this series of blogs I will do my best to present how I progressively made Vim better and in the end my primary tool of coding for both work and personal projects today.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Throughout the years I have been coding, different IDEs&amp;#x2F;editors have attracted me and improved my workflow in different ways. Back in college, the very first editor I was taught to use a lot for CS classes was the good old Vim that comes with most Linux distributions. At the time I did not spend much time hacking it and simply learned a lot of the basic ways of using it. But it did serve its purposes for a college student with general syntax highlighting for most main stream languages and allowed me completing most of my projects.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Coding" scheme="https://chinapandaman.github.io/tags/Coding/"/>
    
    <category term="IDE" scheme="https://chinapandaman.github.io/tags/IDE/"/>
    
    <category term="Vim" scheme="https://chinapandaman.github.io/tags/Vim/"/>
    
  </entry>
  
</feed>

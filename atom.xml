<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jinge Li&#39;s Blog</title>
  
  <subtitle>Hacking and Stargazing</subtitle>
  <link href="https://chinapandaman.github.io/atom.xml" rel="self"/>
  
  <link href="https://chinapandaman.github.io/"/>
  <updated>2023-05-02T18:40:04.022Z</updated>
  <id>https://chinapandaman.github.io/</id>
  
  <author>
    <name>Jinge Li</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Configure Vim as Primary IDE - Boilerplate</title>
    <link href="https://chinapandaman.github.io/2023/05/02/vim-blog-2/"/>
    <id>https://chinapandaman.github.io/2023/05/02/vim-blog-2/</id>
    <published>2023-05-02T22:52:55.000Z</published>
    <updated>2023-05-02T18:40:04.022Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><p>Before I start, make sure to checkout <a href="https://github.com/chinapandaman/vim-config">the GitHub repository</a> which contains all the configs and scripts I will be covering in this series of blogs.</p><h3 id="Plugin-Managing"><a href="#Plugin-Managing" class="headerlink" title="Plugin Managing"></a>Plugin Managing</h3><p>To make Vim as beefy as an IDE, it is not possible without plugins, at least for me. Vim has a large and active community and there are thousands of plugins out there that can boost my developing experience.</p><p>To install plugins I will first need a plugin manager. In my case the plugin manager I picked is <a href="https://github.com/junegunn/vim-plug">vim-plug</a>.</p><p>Installing vim-plug is quite simple:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br></pre></td></tr></table></figure><p>The actual usage of vim-plug revolves around modifying my <code>.vimrc</code> file. The below snippet exists at the very top of it:</p><span id="more"></span><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> plug#begin()</span><br><span class="line">    <span class="comment">&quot; a list of plugins to install</span></span><br><span class="line">    Plug <span class="string">&#x27;morhetz/gruvbox&#x27;</span></span><br><span class="line"><span class="keyword">call</span> plug#end()</span><br></pre></td></tr></table></figure><p>By adding plugins between the two <code>call</code> blocks, vim-plug allows me to easily add&#x2F;change&#x2F;remove plugins via my <code>.vimrc</code> file.</p><p>After defining plugins, I can simply install them by running <code>:PlugInstall</code> within Vim. And after the installation has completed, I can check the status of plugins by running <code>:PlugStatus</code>. Here is a screenshot of the UI:</p><p><img src="/2023/05/02/vim-blog-2/1.png"></p><p>So now I have setup vim-plug which allows me to utilize plugins to expand Vim.</p><h3 id="Making-My-Configuration-Portable"><a href="#Making-My-Configuration-Portable" class="headerlink" title="Making My Configuration Portable"></a>Making My Configuration Portable</h3><p>The other thing that came to my mind is that I want to make my Vim configuration as portable as I can. So whenever I’m on a new machine it will require minimum effort to restore my config.</p><p>To achieve this I will need to write some <code>bash</code> script. Here is what I have:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># setup.sh</span></span><br><span class="line"><span class="built_in">rm</span> -rf ~/.vim/</span><br><span class="line">curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim</span><br><span class="line"><span class="built_in">cp</span> .vimrc ~/.vimrc</span><br><span class="line">vim +PlugInstall +qa</span><br></pre></td></tr></table></figure><p>Let’s look at this line by line.</p><p>The first line removes the current existed <code>~/.vim/</code> directory, allowing me to have a fresh, plugin free Vim environment for my own config.</p><p>The second line is the same command that installs vim-plug which we have covered in the last section.</p><p>The third line copies my <code>.vimrc</code> to where the file should be at on the designated machine. In the future <code>.vimrc</code> will contain a lot of configs I will be making. But for now it simply has all the needed plugins managed by vim-plug.</p><p>The last line is a sequence of commands. It first launches Vim, runs the command <code>:PlugInstall</code> which installs all the plugins via vim-plug, and finally runs the command <code>:qa</code> which quits Vim. It may seem a bit complex but all it’s doing is installing plugins.</p><p>From here, I can make use of my own Vim configuration on any machine by just running:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash setup.sh</span><br></pre></td></tr></table></figure><p>And the <code>bash</code> script will cleanup the Vim environment, install vim-plug, install my vim config, and install all plugins needed for the config.</p><h3 id="Conclusion"><a href="#Conclusion" class="headerlink" title="Conclusion"></a>Conclusion</h3><p>In this blog, I have gone over some boilerplate steps that would make configuring and making use of a Vim config easier.</p><p>In the next article I will talk about some simple configurations that would enhance the basic editing experience.</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;Reference&quot;&gt;&lt;a href=&quot;#Reference&quot; class=&quot;headerlink&quot; title=&quot;Reference&quot;&gt;&lt;/a&gt;Reference&lt;/h3&gt;&lt;p&gt;Before I start, make sure to checkout &lt;a href=&quot;https://github.com/chinapandaman/vim-config&quot;&gt;the GitHub repository&lt;/a&gt; which contains all the configs and scripts I will be covering in this series of blogs.&lt;/p&gt;
&lt;h3 id=&quot;Plugin-Managing&quot;&gt;&lt;a href=&quot;#Plugin-Managing&quot; class=&quot;headerlink&quot; title=&quot;Plugin Managing&quot;&gt;&lt;/a&gt;Plugin Managing&lt;/h3&gt;&lt;p&gt;To make Vim as beefy as an IDE, it is not possible without plugins, at least for me. Vim has a large and active community and there are thousands of plugins out there that can boost my developing experience.&lt;/p&gt;
&lt;p&gt;To install plugins I will first need a plugin manager. In my case the plugin manager I picked is &lt;a href=&quot;https://github.com/junegunn/vim-plug&quot;&gt;vim-plug&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Installing vim-plug is quite simple:&lt;/p&gt;
&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;The actual usage of vim-plug revolves around modifying my &lt;code&gt;.vimrc&lt;/code&gt; file. The below snippet exists at the very top of it:&lt;/p&gt;</summary>
    
    
    
    
    <category term="Coding" scheme="https://chinapandaman.github.io/tags/Coding/"/>
    
    <category term="IDE" scheme="https://chinapandaman.github.io/tags/IDE/"/>
    
    <category term="Vim" scheme="https://chinapandaman.github.io/tags/Vim/"/>
    
  </entry>
  
  <entry>
    <title>Configure Vim as Primary IDE - Intro</title>
    <link href="https://chinapandaman.github.io/2023/04/28/vim-blog-1/"/>
    <id>https://chinapandaman.github.io/2023/04/28/vim-blog-1/</id>
    <published>2023-04-28T19:31:10.000Z</published>
    <updated>2023-05-02T18:40:17.522Z</updated>
    
    <content type="html"><![CDATA[<p>Throughout the years I have been coding, different IDEs&#x2F;editors have attracted me and improved my workflow in different ways. Back in college, the very first editor I was taught to use a lot for CS classes was the good old Vim that comes with most Linux distributions. At the time I did not spend much time hacking it and simply learned a lot of the basic ways of using it. But it did serve its purposes for a college student with general syntax highlighting for most main stream languages and allowed me completing most of my projects.</p><span id="more"></span><p>When I first started my career, I came to realization that I finally need something more beefy than just an editor. And this is around the time where I was introduced to the JetBrains IDEs, in particular PyCharm. The rich features bundled in even just the community edition of this IDE such as GUI debugging, refactoring, searches and static analysis are amazing. Not to mention with the professional edition (which most companies would be more than happy to purchase for their software engineers), you can have supports on some of the most popular frameworks such as Django and Flask, and it has an awesome GUI database tool which makes day-to-day DB workload just that much simpler. To me, PyCharm is truly, like what JetBrains suggests, the essential tool for software developers. Throughout these years, I have tried different editors such as Atom, Sublime, vscode, etc. However none of these, even with a rich set of plugins, can compete with the kind of developing experience PyCharm brought to me.</p><p>After being spoiled for a long time by JetBrains IDEs, things finally started changing a little bit. I have recently acquired a new job and there are certain things with the new role that makes me shift away from an IDE with lots of out-of-the-box features. First of all the system admin restricts a lot of accesses on the laptops given to the employees, making installing any software quite a process. These restrictions however revolves mostly around the GUIs and does not stop you from doing a lot of things using the terminal. On top of that the kind of work I’m doing with this role is more and more based on terminal than GUIs. Finally unlike a lot of my previous roles where the tech stacks are usually monolithic, this time I have to use a wide variety of languages and frameworks. Ultimately this means I have to look for something that’s more general purpose than a monolithic IDE.</p><p>All and all I have decided that instead of something like PyCharm I need another tool that can boost my development experience with the new role. But I also said I didn’t really like a lot of the editors I tried like say vscode. And this is the moment I put my eyes back on my good old friend from college, Vim. I have used Vim heavily back in the days and know how strong it is when it comes to editing. And despite the fact that I have been a bandwagon on the IDE side, I’m also aware how configurable Vim can be and there have been projects like SpaceVim I know of which turns Vim into an IDE. And obviously Vim, even though it can be run as a GUI, is primarily terminal based.</p><p>So finally I made the decision of switching back to Vim. And my goal is ultimately making developing using Vim a similar if not the same experience as an IDE like PyCharm, but also more general purpose and terminal based. In this series of blogs I will do my best to present how I progressively made Vim better and in the end my primary tool of coding for both work and personal projects today.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;Throughout the years I have been coding, different IDEs&amp;#x2F;editors have attracted me and improved my workflow in different ways. Back in college, the very first editor I was taught to use a lot for CS classes was the good old Vim that comes with most Linux distributions. At the time I did not spend much time hacking it and simply learned a lot of the basic ways of using it. But it did serve its purposes for a college student with general syntax highlighting for most main stream languages and allowed me completing most of my projects.&lt;/p&gt;</summary>
    
    
    
    
    <category term="Coding" scheme="https://chinapandaman.github.io/tags/Coding/"/>
    
    <category term="IDE" scheme="https://chinapandaman.github.io/tags/IDE/"/>
    
    <category term="Vim" scheme="https://chinapandaman.github.io/tags/Vim/"/>
    
  </entry>
  
</feed>
